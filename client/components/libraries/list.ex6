import React          from 'react';
import Router         from 'react-router';
import Marty          from 'marty';
import Library        from './library.ex6';
import librariesStore from '../../stores/libraries.es6';
import Loader         from '../shared/loader.ex6';

class List extends React.Component {

	constructor() {

	}

	render() {
		return (
			<div>
				{this.props.keyword}
				<table className="table">
					<thead>
						<tr>
							<th>Name</th>
							<th>Authors</th>
							<th>Home page</th>
						</tr>
					</thead>
					<tbody>
						{this.props.libraries.map(function (library, index) {
							return (<Library key={library.id} library={library} />)
						})}
					</tbody>
				</table>
			</div>
		)
	}

}

// http://martyjs.org/guides/containers/index.html
export default Marty.createContainer(List, {
	// when librariesStore changes fetch will be called
	listenTo: librariesStore,

	propTypes: {
		keyword: React.PropTypes.string.isRequired
	},

	// fetch is an object where the values are functions which are invoked 
	// and the result is passed to the inner component as a prop.
	fetch: {
		libraries() {
			var keyword = this.props.keyword;
			console.log('List Container', 'libraries');
			console.log('this.props.keyword', keyword);

			if (keyword == null) throw new Error('keyword expected in props');
			if (keyword == '') console.log('keyword is empty')

			return librariesStore.for(this).fetchLibraries(keyword);
		}
	},

	failed(errors) {
		return <div className="User User-failedToLoad">ERRORS {errors}</div>;
	},

	pending() {
		return <Loader />;
	}
})