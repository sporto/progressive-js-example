import React      from 'react';
import Router     from 'react-router';
import Marty      from 'marty';
import SA         from 'superagent';
import List       from './list.ex6';
import SearchForm from './search_form.ex6';
import LibrariesStore from '../../stores/libraries.es6';

class Main extends React.Component {

	constructor(props) {
		// console.log(this.displayName, 'constructor', props)
		this.state = {
			keyword:   '',
			busy:      false,
			libraries: []
		}
	}

	onSearch(keyword) {
		// console.log('onSearch', keyword);
		if (keyword) {
			if (keyword !== this.state.keyword) this.context.router.transitionTo('libraries', {}, {keyword: keyword});
		}
	}

	getItems() {
		console.log(this.displayName, 'getItems');

		var comp = this;
		var query   = this.getQuery();
		var keyword = query.keyword;
		console.log('keyword', keyword);

		if (keyword) {
			if (keyword === this.state.keyword) return;

			this.setState({
				keyword: keyword,
				busy: true,
				libraries: []
			});

			var url = "https://rubygems.org/api/v1/search.json?query=" + keyword;
			url = 'http://cors.maxogden.com/' + url;
			console.log('url', url);

			return SA.get(url)
				.type('json')
				.end(function (error, res) {
					console.log(error);
					console.log(res.body);
					if (res) {
						comp.setState({
							libraries: res.body,
							busy: false
						});
					}
				});
		}
	}

	renderList() {
		if (this.state.busy) {
			return (
				<div className="alert alert-info" role="alert">Searching ...</div>
			)
		}

		if (!this.state.keyword) {
			return (
				<div className="alert alert-warning" role="alert">Please enter a keyword</div>
			)
		}

		return <List libraries={this.state.libraries} />
	}

	render() {

		return (
			<section>
				<h2>Libraries</h2>
				<SearchForm
					keyword={this.state.keyword}
					busy={this.state.busy}
					onSearch={this.onSearch.bind(this)}
					/>
				<br />
				{this.renderList()}
			</section>
		)
	}

}

Main.contextTypes = {
	router: React.PropTypes.func
};

module.exports = Marty.createContainer(Main, {
	listenTo: LibrariesStore,

	fetch: {
		libraries() {
			// return LibrariesStore.for(this).all();
			return [];
		}
	},

	failed(errors) {
		return <div className="User User-failedToLoad">{errors}</div>;
	},

	pending() {
		return this.done({
			libraries: []
		});
	}
})